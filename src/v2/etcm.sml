local open Compiler.CMSA val pervenv = pervenv ()
val o3 = run ("parser/ml-yacc/base.sig", pervenv)
val d0 = layer [o3, pervenv]
val o4 = run ("parser/ml-yacc/join.sml", d0)
val f0 = filter [SIG "ARG_LEXER", STR "Stream", SIG "TOKEN", SIG "LEXER", SIG "ARG_PARSER", SIG "PARSER", FCT "Join", SIG "PARSER_DATA", SIG "LR_PARSER", STR "LrTable", FCT "JoinWithArg", SIG "LR_TABLE", STR "LrParser", SIG "STREAM"]
val d1 = f0 o4
val o5 = run ("parser/ml-yacc/lrtable.sml", d0)
val o6 = run ("parser/ml-yacc/stream.sml", d0)
val d2 = layer [o3, o5, o6, pervenv]
val o7 = run ("parser/ml-yacc/parser1.sml", d2)
val d3 = f0 o7
val o0 = run ("tools/int-inf-sig.sml", pervenv)
val d4 = layer [o0, pervenv]
val o1 = run ("tools/int-inf.sml", d4)
val f1 = filter [SIG "INT_INF", STR "IntInf", STR "etTools"]
val d5 = f1 o1
val o8 = run ("parser/etLexPos.sml", pervenv)
val d6 = layer [o8, d5, pervenv]
val o9 = run ("parser/etFromParser.sml", d6)
val d7 = f0 o3
val d8 = layer [d5, d7, pervenv]
val o10 = run ("parser/et.grm.sig", d8)
val d9 = layer [o9, o10, d5, d7, pervenv]
val o11 = run ("parser/et.grm.sml", d9)
val d10 = layer [o8, o10, d5, pervenv]
val o12 = run ("parser/et.lex.sml", d10)
val d11 = layer [o9, o11, o12, d1, d3, pervenv]
val o13 = run ("parser/etParser.sml", d11)
val f2 = filter [FCT "etParserFun", STR "etLexPosition", STR "etFromParser", SIG "etPARSER", SIG "etFROMPARSER", SIG "etLEXPOSITION", FCT "etFromParserFun", STR "etParser"]
val d12 = f2 o13
val o14 = run ("syntax/etAbstractSyntax.sml", pervenv)
val d13 = layer [o14, pervenv]
val o15 = run ("syntax/etEnvironment.sml", d13)
val f3 = filter [SIG "etPRETTYPRINT", SIG "etEVAL", STR "etEnvironment", SIG "etENVIRONMENT", STR "etEval", STR "etPrettyPrint"]
val d14 = f3 o15
val d15 = layer [o14, o15, d5, pervenv]
val o16 = run ("syntax/etEval.sml", d15)
val d16 = f3 o16
val d17 = layer [o14, o15, o16, d5, pervenv]
val o17 = run ("syntax/etPrettyPrint.sml", d17)
val d18 = f3 o17
val d19 = f2 o9
val f4 = filter [SIG "etPRETTYPRINT", STR "etAbstractSyntax", SIG "etEVAL", STR "etEnvironment", SIG "etENVIRONMENT", STR "etEval", SIG "etABSTRACTSYNTAX", STR "etPrettyPrint"]
val d20 = f4 o14
val d21 = f4 o15
val o2 = run ("tools/etTools.sml", pervenv)
val d22 = f1 o2
val d23 = layer [d22, d20, d21, pervenv]
val o18 = run ("compiler/etUnifier.sml", d23)
val d24 = layer [o18, d5, d19, d20, d21, pervenv]
val o19 = run ("compiler/etElab.sml", d24)
val f5 = filter [SIG "etPRETTYPRINT", SIG "etEVAL", STR "etEnvironment", SIG "etENVIRONMENT", STR "etEval", SIG "etELAB", STR "etElab", STR "etPrettyPrint"]
val d25 = f5 o19
val d26 = layer [d12, d14, d16, d18, d25, pervenv]
val o20 = run ("etMain.sml", d26)
val f6 = filter [SIG "ET", STR "et"]
val d27 = f6 o20
in val _ = register d27 end
