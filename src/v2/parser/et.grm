fun Id x = x
%%
%term Fn
    | Val
    | Let | In | End
    | Datatype | From
    | Codatatype | To
    | LeftParen | RightParen
    | DArrow | Colon | Equals | Semicolon
    | Bar | Ampersand
    | Star | Plus | Arrow
    | UpperIdent of string | LowerIdent of string
    | TypeVar of string
    | Iterator of string | Recursor of string
    | Coiterator of string | Corecursor of string
    | LRParen | LRBrace
    | If | Then | Else
    | Exit | Use | Show | Str of string | Norm
    | Number of IntInf.int
    | DummyTerm1 | DummyTerm2 (*this is used only for precedence*)
    | Eof

%nonterm declaration          of FromParser.etDeclaration
       | atomicTerm           of FromParser.etTerm
       | parameters           of FromParser.String list
       | term                 of FromParser.etTerm
       | valueBinding         of FromParser.etValBinding
       | valueBindings        of FromParser.etValBinding list
       | type_                of FromParser.etType
       | typeInCons           of FromParser.etType
       | consType             of FromParser.String * FromParser.etType list
       | types                of FromParser.etType list
       | datatypeDefinition
           of FromParser.String * (FromParser.String list) * 
               (FromParser.String * FromParser.etType list) list
       | typeConstructor      of FromParser.String * FromParser.String list
       | constructorList   
           of (FromParser.String * FromParser.etType list) list
       | constructorEntry     of FromParser.String * FromParser.etType list
       | codatatypeDefinition
           of FromParser.String * (FromParser.String list) *
              (FromParser.String * FromParser.etType list) list
       | destructorList
           of (FromParser.String * FromParser.etType list) list
       | destructorEntry      of FromParser.String * FromParser.etType list
       | lowUpIdent           of FromParser.String

%nonassoc DummyTerm2
%right Arrow
%left Plus
%left Star
%nonassoc DArrow
%left Equals
%left Colon
%nonassoc DummyTerm1
%nonassoc LowerIdent UpperIdent Iterator Recursor Number 
%nonassoc Coiterator Corecursor LRParen LeftParen Let Fn If Then Else
%nonassoc TypeVar LRBrace

%name et
%header (functor etLrValsFun(structure Token:TOKEN
                             structure FromParser:etFROMPARSER))

%pos FromParser.Position.Position
%eop Eof Semicolon
%noshift Eof
%pure
%verbose
%%
declaration:
           (FromParser.mkTermWithPos FromParser.Empty () defaultPos defaultPos)
 | valueBinding      (FromParser.mkTermWithPos FromParser.ValBind valueBinding 
                       valueBindingleft valueBindingright)
 | term      (FromParser.mkTermWithPos FromParser.Term term termleft termright)
 | datatypeDefinition   (FromParser.mkTermWithPos FromParser.DatatypeDef
            datatypeDefinition datatypeDefinitionleft datatypeDefinitionright)
 | codatatypeDefinition (FromParser.mkTermWithPos FromParser.CodatatypeDef
      codatatypeDefinition codatatypeDefinitionleft codatatypeDefinitionright)
 | Exit   (FromParser.mkTermWithPos FromParser.Eof () defaultPos defaultPos )
 | Use Str  (FromParser.mkTermWithPos FromParser.Command ("use",Str) 
	     Useleft Strright)
 | Show	    (FromParser.mkTermWithPos FromParser.Command ("show","") 
	     Showleft Showright)
 | Show	lowUpIdent (FromParser.mkTermWithPos FromParser.Command 
		    ("show",(fn (a,_) => a) lowUpIdent) 
	     Showleft lowUpIdentright)
 | Show	Star (FromParser.mkTermWithPos FromParser.Command 
		    ("show","*") Showleft Starright)
 | Show	Plus (FromParser.mkTermWithPos FromParser.Command 
		    ("show","+") Showleft Plusright)
 | Show	LRBrace (FromParser.mkTermWithPos FromParser.Command 
		    ("show","{}") Showleft LRBraceright)
 | Norm term (FromParser.mkTermWithPos  FromParser.Norm term 
	      Normleft termright)

atomicTerm:
   lowUpIdent            (FromParser.mkTermWithPos FromParser.Ident 
                           (FromParser.getTerm lowUpIdent)
                             lowUpIdentleft lowUpIdentright )
 | Iterator              (FromParser.mkTermWithPos FromParser.Ident Iterator
                           Iteratorleft Iteratorright)
 | Recursor              (FromParser.mkTermWithPos FromParser.Ident Recursor
                           Recursorleft Recursorright)
 | Coiterator            (FromParser.mkTermWithPos FromParser.Ident Coiterator
                           Coiteratorleft Coiteratorright)
 | Corecursor            (FromParser.mkTermWithPos FromParser.Ident Corecursor
                           Corecursorleft Corecursorright)
 | Number               (FromParser.mkTermWithPos FromParser.Number Number
                           Numberleft Numberright)
 | LRParen               (FromParser.mkTermWithPos FromParser.Ident "()"
                           LRParenleft LRParenright)
 | LeftParen term RightParen     (term)
 | Let valueBindings In term End (FromParser.mkTermWithPos FromParser.Let
                                   (valueBindings,term)
                                   Letleft Endright)
 | Fn parameters DArrow term     (FromParser.mkTermWithPos FromParser.Fn 
                                   (parameters,term)
                                   Fnleft termright)
 | If term Then term Else term   (
    let
      fun mkapp t lpos rpos = FromParser.mkTermWithPos FromParser.App 
                                t lpos rpos
    in
      mkapp 	
      (mkapp 
      (mkapp (FromParser.mkTermWithPos FromParser.Ident "IF" Ifleft
                           Ifright,term1)
                         Ifleft term1right,term2)
        Ifleft term2right,term3) Ifleft term3right
    end)

parameters:
   LowerIdent            ([FromParser.mkTermWithPos Id LowerIdent
                            LowerIdentleft LowerIdentright])
 | parameters LowerIdent (parameters@[FromParser.mkTermWithPos Id LowerIdent
                                        LowerIdentleft LowerIdentright])

term:
   atomicTerm                       (atomicTerm)
 | term atomicTerm %prec DummyTerm1 (FromParser.mkTermWithPos FromParser.App 
                                      (term,atomicTerm)
                                      termleft atomicTermright)
 | term Colon term      (
    let
      fun mkapp t lpos rpos = FromParser.mkTermWithPos FromParser.App t 
                                lpos rpos
    in
      mkapp 
        (mkapp (FromParser.mkTermWithPos FromParser.Ident "," 
                                           Colonleft Colonright,term1)
                         term1left Colonright,term2)
        term1left term2right
    end)
 | term Equals term         (
    let
      fun mkapp t lpos rpos = FromParser.mkTermWithPos FromParser.App 
                                t lpos rpos
    in
      mkapp 
      (mkapp (FromParser.mkTermWithPos FromParser.Ident "=" Equalsleft
                           Equalsright,term1)
                         term1left Equalsright,term2)
        term1left term2right
    end)

valueBinding:
   Val LowerIdent Equals term (
     FromParser.mkTermWithPos FromParser.Val 
       (FromParser.mkTermWithPos Id LowerIdent LowerIdentleft 
          LowerIdentright,term)
       Valleft termright)

valueBindings:
   valueBinding Semicolon               ([valueBinding])
 | valueBinding Semicolon valueBindings (valueBinding::valueBindings)

type_: (*this should be "type", but "type" is keyword in SML*)
   TypeVar                 (FromParser.mkTermWithPos FromParser.TypeVar TypeVar
                             TypeVarleft TypeVarright)
 | LeftParen type_ RightParen (type_)
 | consType  %prec DummyTerm1 (FromParser.mkTermWithPos FromParser.TypeApp
                                consType consTypeleft consTyperight)
 | LRBrace           (FromParser.mkTermWithPos FromParser.TypeApp 
                       (FromParser.mkTermWithPos Id "{}" LRBraceleft 
                         LRBraceright,nil) LRBraceleft LRBraceright)
 | type_ Star type_  (FromParser.mkTermWithPos FromParser.TypeApp
                       (FromParser.mkTermWithPos Id "*" Starleft Starright,
                        [type_1,type_2]) type_1left type_2right)
 | type_ Plus type_  (FromParser.mkTermWithPos FromParser.TypeApp
                       (FromParser.mkTermWithPos Id "+" Plusleft Plusright,
                        [type_1,type_2]) type_1left type_2right)
 | type_ Arrow type_ (FromParser.mkTermWithPos FromParser.TypeApp
                       (FromParser.mkTermWithPos Id "->" Arrowleft Arrowright,
                        [type_1,type_2]) type_1left type_2right)

typeInCons:
   TypeVar           (FromParser.mkTermWithPos FromParser.TypeVar TypeVar
                                 TypeVarleft TypeVarright)
 | LeftParen type_ RightParen  (type_)
 | lowUpIdent       (FromParser.mkTermWithPos FromParser.TypeApp 
                     (lowUpIdent,nil) lowUpIdentleft lowUpIdentright)
 | LRBrace          (FromParser.mkTermWithPos FromParser.TypeApp 
                     (FromParser.mkTermWithPos Id "{}" LRBraceleft LRBraceright
                        ,nil) LRBraceleft LRBraceright)
 | typeInCons Star typeInCons  
            (FromParser.mkTermWithPos FromParser.TypeApp
              (FromParser.mkTermWithPos Id "*" Starleft Starright,
                [typeInCons1,typeInCons2]) typeInCons1left typeInCons2right)
 | typeInCons Plus typeInCons  
            (FromParser.mkTermWithPos FromParser.TypeApp
              (FromParser.mkTermWithPos Id "+" Plusleft Plusright,
                [typeInCons1,typeInCons2]) typeInCons1left typeInCons2right)
 | typeInCons Arrow typeInCons 
            (FromParser.mkTermWithPos FromParser.TypeApp
              (FromParser.mkTermWithPos Id "->" Arrowleft Arrowright,
                [typeInCons1,typeInCons2]) typeInCons1left typeInCons2right)

consType:
   lowUpIdent                   ((lowUpIdent,nil))
 | consType typeInCons %prec DummyTerm2 
                                ((fn (a,b) => (a,b@[typeInCons])) consType)

types:
   type_       ([type_])
 | types type_ (types @ [type_])

datatypeDefinition:
   Datatype typeConstructor Equals ((fn (a,b) => (a,b,nil)) typeConstructor)
 | Datatype typeConstructor Equals constructorList 
             ((fn (a,b) => fn c => (a,b,c)) typeConstructor constructorList)

typeConstructor:
   lowUpIdent              ((lowUpIdent,nil))
 | typeConstructor TypeVar (
    (fn (a,b) => 
       (a,b@[FromParser.mkTermWithPos Id TypeVar TypeVarleft TypeVarright]))
     typeConstructor)

constructorList:
   constructorEntry                     ([constructorEntry])
 | constructorList Bar constructorEntry (constructorList @ [constructorEntry])

constructorEntry:
   UpperIdent             ((FromParser.mkTermWithPos Id UpperIdent
                              UpperIdentleft UpperIdentright ,nil))
 | UpperIdent From types  ((FromParser.mkTermWithPos Id UpperIdent
                              UpperIdentleft UpperIdentright ,types))

codatatypeDefinition:
   Codatatype typeConstructor Equals ((fn (a,b) => (a,b,nil)) typeConstructor)
 | Codatatype typeConstructor Equals destructorList 
               ((fn (a,b) => fn c => (a,b,c)) typeConstructor destructorList)

destructorList:
   destructorEntry                          ([destructorEntry])
 | destructorList Ampersand destructorEntry (destructorList@[destructorEntry])

destructorEntry:
   UpperIdent           ((FromParser.mkTermWithPos Id UpperIdent
                            UpperIdentleft UpperIdentright ,nil))
 | UpperIdent To types  ((FromParser.mkTermWithPos Id UpperIdent
                            UpperIdentleft UpperIdentright ,types))

lowUpIdent:
   LowerIdent (FromParser.mkTermWithPos Id LowerIdent
                 LowerIdentleft LowerIdentright)
 | UpperIdent (FromParser.mkTermWithPos Id UpperIdent
                 UpperIdentleft UpperIdentright)
